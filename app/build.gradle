plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
//    id 'androidx.navigation.safeargs'
    id 'dagger.hilt.android.plugin'
}

android {
    namespace 'com.example.yesno'
    compileSdk buildConfig.compileSdk

    defaultConfig {
        applicationId "com.example.yesno"
        minSdk buildConfig.minSdk
        targetSdk buildConfig.compileSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.example.yesno.util.CustomTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures() {
        dataBinding true
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }

    testOptions {
        packagingOptions {
            jniLibs {
                useLegacyPackaging = true
            }
        }
    }
}

dependencies {

    implementation "androidx.core:core-ktx:${versions.core_version}"
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "com.google.dagger:hilt-android:${versions.hilt}"
    kapt "com.google.dagger:hilt-compiler:${versions.hilt}"

    testImplementation "com.google.dagger:hilt-android-testing:${versions.hilt}"
    kaptTest "com.google.dagger:hilt-android-compiler:${versions.hilt}"

    androidTestImplementation "com.google.dagger:hilt-android-testing:${versions.hilt}"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:${versions.hilt}"

    implementation "androidx.activity:activity-ktx:${versions.activity_version}"
    implementation "androidx.fragment:fragment-ktx:${versions.fragment_version}"
    debugImplementation "androidx.fragment:fragment-testing:${versions.fragment_version}"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle_version}"
    // ViewModel utilities for Compose
    // implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle_version}"
    // Lifecycles only (without ViewModel or LiveData)
    // implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:${versions.lifecycle_version}"

    // Annotation processor
    //kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle_version}"

    // optional - helpers for implementing LifecycleOwner in a Service
    //implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"

    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    //implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    //implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    // optional - Test helpers for LiveData
    androidTestImplementation "androidx.arch.core:core-testing:${versions.arch_version}"

    // optional - Test helpers for Lifecycle runtime
    androidTestImplementation "androidx.lifecycle:lifecycle-runtime-testing:${versions.lifecycle_version}"

//    // Navigation
//    def nav_version = "2.5.0"
//    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
//    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
//    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
//    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

//    // Room
//    def room_version = "2.4.2"
//    implementation "androidx.room:room-runtime:$room_version"
//    kapt "androidx.room:room-compiler:$room_version"
//    implementation "androidx.room:room-ktx:$room_version"
//    testImplementation "androidx.room:room-testing:$room_version"

//    // CameraX
//    def camerax_version = "1.1.0-beta01"
//    implementation "androidx.camera:camera-core:${versions.camerax_version}"
//    implementation "androidx.camera:camera-camera2:${versions.camerax_version}"
//    implementation "androidx.camera:camera-lifecycle:${versions.camerax_version}"
//    implementation "androidx.camera:camera-video:${versions.camerax_version}"
//
//    implementation "androidx.camera:camera-view:${versions.camerax_version}"
//    implementation "androidx.camera:camera-extensions:${versions.camerax_version}"

//    // Timber
//    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"
    implementation "com.squareup.moshi:moshi-kotlin:${versions.moshi}"

    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${versions.glide}"

    testImplementation "com.google.truth:truth:${versions.truth}"
    testImplementation "com.google.truth.extensions:truth-java8-extension:${versions.truth}"
    testImplementation "androidx.test.ext:truth:${versions.ext_truth}"
    androidTestImplementation "com.google.truth:truth:${versions.truth}"
    androidTestImplementation "com.google.truth.extensions:truth-java8-extension:${versions.truth}"
    androidTestImplementation "androidx.test.ext:truth:${versions.ext_truth}"

    testImplementation "io.mockk:mockk-android:${versions.mockkVersion}"
    testImplementation "io.mockk:mockk-agent:${versions.mockkVersion}"
    androidTestImplementation "io.mockk:mockk-android:${versions.mockkVersion}"
    androidTestImplementation "io.mockk:mockk-agent:${versions.mockkVersion}"
}